---
import BaseLayout from "@layouts/BaseLayout.astro";
import LongPost from "@components/posts/LongPost.astro";
import ShortPost from "@components/posts/ShortPost.astro";
import Paginator from "@components/posts/Paginator.astro";

import { getCollectionPosts } from "@utils/utils.ts";

import { type Frontmatter } from "@utils/types.ts";
import { type Page } from "astro";
export interface Props {
  page: Page;
}
// @ts-expect-error: what the fuck IS the type of paginate
export async function getStaticPaths({ paginate }) {
  let posts = await getCollectionPosts("blog");
  return paginate(posts, { pageSize: 3 });
}

const frontmatter = {
  title: "glog",
  description: "Every developer needs an abandoned blog, and this one is mine.",
  date: new Date("2020-02-10"),
  updated: new Date("2024-11-10"),
} as Frontmatter;

const { page } = Astro.props;

const { maxDate, minDate } = page.data.reduce(
  (acc, post) => {
    const currentDate = post.data.date;
    if (currentDate > acc.maxDate) acc.maxDate = currentDate;
    if (currentDate < acc.minDate) acc.minDate = currentDate;
    return acc;
  },
  { maxDate: new Date(0), minDate: new Date() },
);

let goofs = await getCollectionPosts("goofs", (post) => {
  return post.data.date >= minDate && post.data.date < maxDate;
});

let allPosts = [...goofs, ...page.data];
allPosts.sort((a, b) => b.data.date - a.data.date);
---

<BaseLayout frontmatter={frontmatter}>
  <div class="base">
    {
      allPosts.map((post, index) => {
        return (
          <div>
            {index !== 0 && <hr />}
            {post.collection === "blog" ? (
              <LongPost post={post} desc={false} />
            ) : post.collection === "goofs" ? (
              <ShortPost post={post} />
            ) : null}
          </div>
        );
      })
    }

    <Paginator page={page} />
  </div>
</BaseLayout>

<style>
  .base {
    min-height: 100%;
    display: flex;
    flex-direction: column;
    align-content: space-between;
    justify-content: space-between;
  }
</style>

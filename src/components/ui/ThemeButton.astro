---
export interface ThemeButtonProps {}
const {} = Astro.props as ThemeButtonProps;

import { Icon } from "astro-icon/components";
---

<button id="themetoggle" transition:persist>
  <Icon name="mingcute:sun-fill" class="sun" />
  <Icon name="mingcute:moon-fill" class="moon" />
</button>

<script is:inline>
  const themes = ["light", "dark"];

  function getTheme() {
    const stored = localStorage?.getItem("theme");
    if (themes.includes(stored)) {
      return stored;
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  }

  function setTheme(theme) {
    document.documentElement.classList.remove(...themes);
    document.documentElement.classList.add(theme);
    window.localStorage.setItem("theme", theme);
  }

  function toggleTheme() {
    const currentIndex = themes.indexOf(getTheme());
    const next = themes[(currentIndex + 1) % themes.length];
    setTheme(next);
  }

  setTheme(getTheme());
  document.getElementById("themetoggle").addEventListener("click", toggleTheme);
  document.addEventListener("astro:after-swap", () => {
    setTheme(getTheme());
  });
</script>

<style>
  button {
    color: var(--text-soft);
    border: none;
    background: none;
    width: 2.5rem;
    height: 2.5rem;
    cursor: pointer;
    border-radius: var(--squircle);
    /* transition: all var(--snap) ease-in-out; */
    margin: auto;
  }

  button:hover {
    color: var(--text);
    background-color: var(--highlight);
  }

  svg {
    width: 100%;
    height: 100%;
  }

  .sun {
    display: none;
  }
  .moon {
    display: block;
  }

  :global(.dark) .sun {
    display: block;
  }
  :global(.dark) .moon {
    display: none;
  }
</style>

---
export interface ThemeButtonProps {}
const {} = Astro.props as ThemeButtonProps;

import { Icon } from "astro-icon/components";
---

<button id="themetoggle">
  <Icon name="mingcute:sun-fill" class="sun" />
  <Icon name="mingcute:moon-fill" class="moon" />
</button>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme);

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  document
    .getElementById("themetoggle")
    .addEventListener("click", handleToggleClick);
</script>

<style>
  button {
    color: var(--text-soft);
    border: 0;
    background: none;
    width: 2.5rem;
    height: 2.5rem;
    cursor: pointer;
    border-radius: var(--squircle);
    /* transition: all var(--snap) ease-in-out; */
    margin: auto;
  }

  button:hover {
    /* TODO: color */
    color: var(--text);
    background-color: var(--highlight);
  }
  button:active {
    background-color: black;
  }
  svg {
    width: 100%;
    height: 100%;
  }

  .sun {
    display: none;
  }
  .moon {
    display: block;
  }

  :global(.dark) .sun {
    display: block;
  }
  :global(.dark) .moon {
    display: none;
  }
</style>
